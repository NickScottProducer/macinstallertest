name: macOS installer smoke test
on:
  workflow_dispatch:
    inputs:
      installer_url:
        description: "HTTPS URL to your .pkg/.dmg OR .zip containing one"
        required: false

jobs:
  test:
    runs-on: macos-15
    steps:
      - name: Resolve installer URL
        id: url
        run: |
          if [ -n "${{ github.event.inputs.installer_url }}" ]; then
            echo "url=${{ github.event.inputs.installer_url }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ secrets.INSTALLER_URL }}" ]; then
            echo "url=${{ secrets.INSTALLER_URL }}" >> $GITHUB_OUTPUT
          else
            echo "No installer URL provided"; exit 1
          fi

      - name: Download installer
        run: |
          set -euxo pipefail
          curl -L "${{ steps.url.outputs.url }}" -o installer.bin
          file installer.bin | tee filetype.txt

      - name: Identify installer type and path (DMG/PKG/ZIP/APP)
        id: detect
        run: |
          set -euxo pipefail
          # DMG?
          if hdiutil imageinfo installer.bin >/dev/null 2>&1; then
            mv installer.bin build.dmg
            echo "type=dmg"  >> $GITHUB_OUTPUT
            echo "path=$PWD/build.dmg" >> $GITHUB_OUTPUT
            exit 0
          fi
          # PKG?
          if xar -tf installer.bin >/dev/null 2>&1; then
            mv installer.bin build.pkg
            echo "type=pkg"  >> $GITHUB_OUTPUT
            echo "path=$PWD/build.pkg" >> $GITHUB_OUTPUT
            exit 0
          fi
          # ZIP?
          if unzip -tq installer.bin >/dev/null 2>&1; then
            rm -rf unzipped && mkdir -p unzipped
            unzip -q installer.bin -d unzipped
            echo "unzipped tree:"; find unzipped -maxdepth 3 -print | sed 's/^/  /' | tee unzipped.txt
            FOUND=$(find unzipped -maxdepth 4 -type f \( -name "*.pkg" -o -name "*.dmg" -o -name "*.app" \) | head -n1 || true)
            if [ -z "$FOUND" ]; then
              echo "No PKG/DMG/APP found inside zip"; exit 2
            fi
            case "$FOUND" in
              *.pkg) echo "type=pkg" ;;
              *.dmg) echo "type=dmg" ;;
              *.app) echo "type=app" ;;
            esac >> $GITHUB_OUTPUT
            echo "path=$FOUND" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Unknown installer type"; file installer.bin; exit 2

      - name: PKG install
        if: steps.detect.outputs.type == 'pkg'
        run: |
          set -euxo pipefail
          PKG="${{ steps.detect.outputs.path }}"
          spctl --assess --type install -vv "$PKG" || true
          pkgutil --check-signature "$PKG" || true
          sudo installer -pkg "$PKG" -target / -verboseR | tee install.log
          pkgutil --pkgs | tee receipts.txt
          # Replace com.your.bundleid with your real one to list payload files:
          pkgutil --files com.your.bundleid | tee files.txt || true

      - name: DMG install → /Applications
        if: steps.detect.outputs.type == 'dmg'
        run: |
          set -euxo pipefail
          MNT=/Volumes/APPTEST
          hdiutil attach "${{ steps.detect.outputs.path }}" -mountpoint "$MNT" -nobrowse
          APP=$(ls "$MNT"/*.app | head -n1 || true)
          if [ -z "$APP" ]; then echo "No .app in DMG"; ls -la "$MNT"; exit 3; fi
          sudo cp -R "$APP" /Applications/
          hdiutil detach "$MNT"
          APPNAME=$(basename "$APP")
          /usr/bin/codesign -dv --verbose=4 "/Applications/$APPNAME" 2>&1 | tee codesign.txt
          /usr/bin/spctl --assess --type execute -vv "/Applications/$APPNAME" || true

      - name: Zipped .app → /Applications
        if: steps.detect.outputs.type == 'app'
        run: |
          set -euxo pipefail
          APP="${{ steps.detect.outputs.path }}"
          sudo cp -R "$APP" /Applications/
          APPNAME=$(basename "$APP")
          /usr/bin/codesign -dv --verbose=4 "/Applications/$APPNAME" 2>&1 | tee codesign.txt
          /usr/bin/spctl --assess --type execute -vv "/Applications/$APPNAME" || true

      - name: Audio plug-in sanity (optional)
        run: |
          ls -al "/Library/Audio/Plug-Ins/Components" || true
          ls -al "/Library/Audio/Plug-Ins/VST3" || true
          /usr/bin/auval -a || true

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: macos-install-logs
          path: |
            install.log
            receipts.txt
            files.txt
            filetype.txt
            codesign.txt
            unzipped.txt
          if-no-files-found: ignore
