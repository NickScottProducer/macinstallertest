name: Build DMGs from GCS URLs (macOS 13 & 14)

on:
  workflow_dispatch:
    inputs:
      zip13_url:
        description: 'Public GCS URL to macOS 13 .zip'
        required: false
        default: ''
      zip14_url:
        description: 'Public GCS URL to macOS 14 .zip'
        required: false
        default: ''
      volname:
        description: 'DMG volume name'
        required: false
        default: 'Willow Drums Installer'
      dmg_base:
        description: 'Base output name'
        required: false
        default: 'WillowKickSnareInstaller'

jobs:
  build:
    runs-on: macos-14
    strategy:
      matrix:
        include:
          - label: macos-13
            url_input: zip13_url
          - label: macos-14
            url_input: zip14_url

    steps:
      - name: Resolve URL for ${{ matrix.label }}
        id: url
        run: |
          v="${{ github.event.inputs[matrix.url_input] }}"
          echo "resolved_url=$v" >> "$GITHUB_OUTPUT"

      - name: Skip if URL missing
        if: ${{ steps.url.outputs.resolved_url == '' }}
        run: echo "No URL for ${{ matrix.label }}. Skipping build."

      - name: Download ZIP
        if: ${{ steps.url.outputs.resolved_url != '' }}
        run: |
          set -euo pipefail
          curl -L --fail --retry 3 --retry-delay 2 "${{ steps.url.outputs.resolved_url }}" -o build.zip
          unzip -tq build.zip >/dev/null || { echo "Not a valid zip"; exit 2; }

      - name: Extract .app (handles nested zips and .bundleâ†’.app)
        if: ${{ steps.url.outputs.resolved_url != '' }}
        run: |
          set -euo pipefail
          UNZ=unzipped; rm -rf "$UNZ"; mkdir -p "$UNZ"
          unzip -q build.zip -d "$UNZ"

          APPDIR=""
          for i in 1 2 3; do
            APPDIR="$(find "$UNZ" -maxdepth 8 -type d -name '*.app' -print -quit || true)"
            [ -n "$APPDIR" ] && break

            BUNDLEDIR="$(find "$UNZ" -maxdepth 8 -type d -name '*.bundle' -print -quit || true)"
            if [ -n "$BUNDLEDIR" ]; then
              PLIST="$BUNDLEDIR/Contents/Info.plist"
              [ -f "$PLIST" ] && /usr/libexec/PlistBuddy -c 'Set :CFBundlePackageType APPL' "$PLIST" || true
              [ -d "$BUNDLEDIR/Contents/MacOS" ] && chmod +x "$BUNDLEDIR"/Contents/MacOS/* || true
              APPDIR="${BUNDLEDIR%.bundle}.app"; mv "$BUNDLEDIR" "$APPDIR"; break
            fi

            NZIP="$(find "$UNZ" -maxdepth 8 -type f -name '*.zip' ! -path '*/.app/*' -print -quit || true)"
            [ -z "$NZIP" ] && break
            TMP="$UNZ/nest_$i"; mkdir -p "$TMP"; unzip -q "$NZIP" -d "$TMP"; rm -f "$NZIP"
          done

          [ -n "$APPDIR" ] || { echo "No .app found in zip"; find "$UNZ" -maxdepth 4 -print; exit 3; }
          case "$APPDIR" in */Contents) APPDIR="$(dirname "$APPDIR")";; esac
          echo "APP_PATH=$APPDIR" >> "$GITHUB_ENV"
          echo "APP_NAME=$(basename "$APPDIR")" >> "$GITHUB_ENV"

      - name: Create DMG
        if: ${{ steps.url.outputs.resolved_url != '' }}
        run: |
          set -euo pipefail
          rm -rf dmg_src; mkdir -p dmg_src
          cp -R "$APP_PATH" dmg_src/
          ln -s /Applications dmg_src/Applications
          if [ -d "dmg_src/${APP_NAME}/Contents/MacOS" ]; then
            find "dmg_src/${APP_NAME}/Contents/MacOS" -type f -exec chmod +x {} \; || true
          fi
          DMG="${{ github.event.inputs.dmg_base }}-${{ matrix.label }}.dmg"
          hdiutil create -volname "${{ github.event.inputs.volname }}" -srcfolder dmg_src -ov -format UDZO "$DMG"
          echo "DMG=$DMG" >> "$GITHUB_ENV"

      - name: Upload DMG
        if: ${{ steps.url.outputs.resolved_url != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.dmg_base }}-${{ matrix.label }}
          path: ${{ env.DMG }}

  test:
    needs: build
    strategy:
      matrix:
        include:
          - os: macos-13
            label: macos-13
            url_input: zip13_url
          - os: macos-14
            label: macos-14
            url_input: zip14_url
    runs-on: ${{ matrix.os }}

    steps:
      - name: Resolve URL (to know if we should test)
        id: url
        run: |
          v="${{ github.event.inputs[matrix.url_input] }}"
          echo "resolved_url=$v" >> "$GITHUB_OUTPUT"

      - name: Download matching DMG
        if: ${{ steps.url.outputs.resolved_url != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.inputs.dmg_base }}-${{ matrix.label }}
          path: dist

      - name: Mount & copy app; basic checks
        if: ${{ steps.url.outputs.resolved_url != '' }}
        run: |
          set -euo pipefail
          DMG="$(ls dist/*.dmg)"
          MNT=/Volumes/APPTEST
          hdiutil attach "$DMG" -mountpoint "$MNT" -nobrowse
          APP="$(find "$MNT" -maxdepth 1 -type d -name '*.app' -print -quit)"
          [ -n "$APP" ] || { echo "No .app at DMG root"; find "$MNT" -maxdepth 2 -print; hdiutil detach "$MNT"; exit 4; }
          sudo cp -R "$APP" /Applications/
          hdiutil detach "$MNT"
          APPNAME="$(basename "$APP")"
          /usr/bin/spctl --assess --type execute -vv "/Applications/$APPNAME" || true
          /usr/bin/codesign -dv --verbose=4 "/Applications/$APPNAME" 2>&1 | tee codesign.txt

      - name: Upload test logs
        if: ${{ steps.url.outputs.resolved_url != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.os }}-test-logs
          path: codesign.txt
